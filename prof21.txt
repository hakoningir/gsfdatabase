1a
Finnið titil og ár kvikmyndarinnar sem hefur titil sem er fremst í stafrófsöð
allra titla.

SELECT title, year
FROM Movie
ORDER BY title
LIMIT 1;

svar:
Avatar │ 2007
-----------------------------------------------------------------------------
1b
Finnið nöfn þeirra kvikmyndaframleiðenda sem ekki hafa framleitt neina
kvikmynd.

SELECT name FROM MovieExec WHERE NOT EXISTS( SELECT * 	FROM Movie WHERE 
cert = producerC AND NOT EXISTS ( SELECT * FROM StarsIn 
WHERE title <> movieTitle AND year <> movieYear));

svar:
├────────────┤
│ Siggi      │
│ Palli      │
│ Stína      │
│ Lísa       │
│ Rögnvaldur │
│ Sjonatan   │
│ Frida      │
└────────────┘
-----------------------------------------------------------------------------
1c
Finnið nöfn þeirra kvikmyndavera sem ekki hafa framleitt kvikmynd sem 
Veturlidi lék í

SELECT name FROM studio WHERE NOT EXISTS (
SELECT * FROM MOVIE, StarsIn WHERE title = movieTitle AND 
year = movieYear AND name = studioName AND starName = "Veturlidi");

svar:
├─────────────────┤
│ Dreamworks      │
│ Paramount       │
│ Warner Brothers │
└─────────────────┘
-----------------------------------------------------------------------------
2a
Finnið nöfn þeirra kvikmynda sem hafa samnefnda kvikmynd.

SELECT title FROM Movie group by title having count(title) > 1;

svar:
│ Tron  │
-----------------------------------------------------------------------------
2b
Finnið nöfn þeirra kvikmyndastjarna sem hafa leikið með öllum öðrum kvenkyns
kvikmyndastjörnum í einhverri kvikmynd.

SELECT name 
FROM MovieStar as m1 
WHERE NOT EXISTS ( 
SELECT name 
FROM MovieStar as m2 
WHERE m2.gender like "f" AND 
m1.name <> m2.name AND NOT EXISTS ( 
SELECT * 
FROM StarsIn as s1, StarsIn as s2 WHERE 
s1.movieTitle = s2.movieTitle AND 
s1.starname = m1.name AND 
s2.starname = m2.name AND 
s1.movieYear = s2.movieYear));

svar:

│ Gunnar   │
│ Hakon    │
│ Isabella │
│ Maria    │
│ Tumi     │
-----------------------------------------------------------------------------
2c
Finnið fyrir sérhverja kvikmyndastjörnu sem leikið hefur í amk tveimur 
kvikmyndum, heildarlengd allra kvikmynda hennar eða hans.


SELECT starName,SUM(length) FROM StarsIn,movie WHERE movieTitle = title AND 
movieYear = year GROUP BY starName HAVING count(title) > 1;

svar:
├───────────┼─────────────┤
│ Gunnar    │ 380         │
│ Hakon     │ 1090        │
│ Isabella  │ 730         │
│ Maria     │ 380         │
│ Tumi      │ 1430        │
│ Veturlidi │ 1220        │
└───────────┴─────────────┘
-----------------------------------------------------------------------------
3a
Finnið alla kvikmyndaframleiðendur hve margar kvikmyndir framleiðandinn hefur 
framleitt og heildarlengd kvikmyndanna. Athugið að kvikmyndaframleiðandinn(movieExec) er 
ekki sama og kvikmyndaver(studio).

SELECT name, count(title), sum(length) FROM movieExec,Movie WHERE cert = producerC GROUP BY producerC;

svar:
├────────────┼──────────────┼─────────────┤
│ Lísa       │ 2            │ 380         │
│ Palli      │ 4            │ 837         │
│ Rögnvaldur │ 2            │ 411         │
│ Siggi      │ 3            │ 970         │
│ Stína      │ 4            │ 670         │
└────────────┴──────────────┴─────────────┘
-----------------------------------------------------------------------------
3b
Finnið nafn og heimilisfang þess kvikmyndavers(studio) sem framleitt hefur 
mestu heildarlegnd kvikmynda.

SELECT name, address FROM studio, movie WHERE name = studioName 
GROUP BY studioName ORDER BY SUM(length) desc limit 1;

svar:
├────────────────────┼────────────┤
│ Metro golden Mayer │ California │
└────────────────────┴────────────┘
-----------------------------------------------------------------------------
3c
Finnið nafn og heimilisfang þeirrar kvikmyndastjörnu sem leikið hefur í mestri
heildarlengd kvikmynda.

SELECT name, address FROM MovieStar,StarsIn,Movie WHERE name = starName 
GROUP BY name ORDER BY SUM(length) desc limit 1;

svar:
├──────┼───────────┤
│ Tumi │ Kopavogur │
└──────┴───────────┘
-----------------------------------------------------------------------------
4a
Finnið þær kvikmyndastjörnur sem léku í öllum kvikmyndum þar sem titillinn byrjar
á stöfunum 'Star Trek'

SELECT name FROM MovieStar WHERE NOT EXISTS (SELECT * FROM Movie WHERE title LIKE "Star Trek%" 
AND NOT EXISTS ( SELECT * FROM StarsIn WHERE name = starName AND title = movieTitle));

svar:
├───────────┤
│ Veturlidi │
└───────────┘
-----------------------------------------------------------------------------
4b
Finnið nafn þeirrar kvikmyndastjörnu sem leikið hefur í kvikmyndum með flestum 
framleiðendum.

SELECT starName FROM StarsIn,Movie WHERE movieTitle = title AND year = movieYear 
GROUP BY starName ORDER BY COUNT(DISTINCT producerC) desc limit 1;

svar:
├───────────┤
│ Veturlidi │
└───────────┘
-----------------------------------------------------------------------------
5

D LIKE D OR D IS NULL
-----------------------------------------------------------------------------
6

A: SELECT * FROM Studio; 
B: SELECT * FROM Studio; 
A: REVOKE SELECT ON Studio FROM C RESTRICT; 
-----------------------------------------------------------------------------
7

a) \pi a,b 	(\sigma b=d(RxS))
b) \pi a,b,d 	(R \bowtie S)
c) \pi a,b	(R \rightbowtie S)

-----------------------------------------------------------------------------
8

A = e.
B = a.
C = b.
held ég
-----------------------------------------------------------------------------
9
AC -> B, B -> A

a) ac, bc eru keys
b) R_1 (ACB) 
   R_2 (BA)
c) ab bc

þetta er þrot nenni ekki meira

-----------------------------------------------------------------------------
CREATE TABLE Movies (
    title VARCHAR (50) PRIMARY KEY,
    year int,
    length int,
    genre VARCHAR (50)
);

CREATE TABLE Stars (
    name VARCHAR (50) PRIMARY KEY,
    address VARCHAR (50)
);

CREATE TABLE Contracts (
    salary int,
    movieTitle VARCHAR (50),
    movieYear int,
    studioName VARCHAR(30),
    starName VARCHAR(30),
    PRIMARY KEY (movieTitle, movieYear, starName, studioName),
    FOREIGN KEY (movieTitle, movieYear) REFERENCES Movies(title,year),
    FOREIGN KEY (starName) REFERENCES Stars(name),
    FOREIGN KEY (studioName) REFERENCES Studios (name)
);

CREATE TABLE Studios (
    name VARCHAR(50) ,
    address VARCHAR(50),
    PRIMARY KEY (name)
);

-----------------------------------------------------------------------------

public class SqlExample {
	static final String url = "jdbc:sqlite:movies.db";
	public static void main(String[] args) throws Exception {
		java.sql.Connection conn = 
		   java.sql.DriverManager.getConnection(url);
		java.sql.Statement stmt = conn.createStatement();
		java.sql.ResultSet rs = 
		   stmt.executeQuery("select sum(length) from movies");
		while (rs.next()) {
			System.out.println(rs.getInt(1));
		}
		rs.close();
		conn.close();
	}
}

-----------------------------------------------------------------------------



